#!/usr/bin/env python3

import http.server
import socketserver
import json
import subprocess
import time
import sys
import os
from urllib.parse import urlparse, parse_qs

def run_shell(cmd: str, timeout: int = 30):
    return subprocess.run(["bash", "-lc", cmd], capture_output=True, text=True, timeout=timeout)

class VPNAPIHandler(http.server.BaseHTTPRequestHandler):
    def log_message(self, format, *args):
        with open('/tmp/vpn_api.log', 'a') as f:
            f.write(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] {format % args}\n")
    
    def do_GET(self):
        path = urlparse(self.path).path
        
        if path == '/health':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(b'{"status":"healthy"}')
            
        elif path == '/status':
            try:
                result = subprocess.run(['nordvpn', 'status'], capture_output=True, text=True, timeout=10)
                status = result.stdout.strip() if result.returncode == 0 else "Disconnected"
                
                try:
                    ip_result = subprocess.run(['curl', '-s', '--max-time', '5', 'ifconfig.me'],
                                             capture_output=True, text=True, timeout=10)
                    ip = ip_result.stdout.strip() if ip_result.returncode == 0 else "unknown"
                except:
                    ip = "unknown"
                
                response = {"status": status, "ip": ip}
                
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                try:
                    self.wfile.write(json.dumps(response).encode())
                except BrokenPipeError:
                    self.log_message("Client disconnected during response write")
                
            except Exception as e:
                self.send_response(500)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps({"error": str(e)}).encode())
        else:
            self.send_response(404)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(b'{"error":"Not found"}')
    
    def do_POST(self):
        path = urlparse(self.path).path
        
        if path == '/switch':
            try:
                # Read request body
                content_length = int(self.headers.get('Content-Length', 0))
                body = self.rfile.read(content_length).decode('utf-8') if content_length > 0 else '{}'
                data = json.loads(body) if body else {}
                
                # Determine country to switch to
                country = data.get('country', 'uk')  # Default to UK
                if country not in ['uk', 'nl', 'de', 'us', 'ca', 'au']:
                    # Rotate through countries
                    countries = ['uk', 'nl', 'de', 'us']
                    country = countries[int(time.time()) % 4]
                
                self.log_message(f"VPN switch requested to: {country}")

                # PRE_CONNECT hook (mirror nord_connect behavior)
                pre = os.environ.get('PRE_CONNECT', '').strip()
                if pre:
                    self.log_message(f"Executing PRE_CONNECT: {pre}")
                    pre_res = run_shell(pre, timeout=30)
                    if pre_res.returncode != 0:
                        self.log_message(f"PRE_CONNECT failed: {pre_res.stderr}")

                # Disconnect first
                self.log_message("Disconnecting current VPN connection")
                disconnect_result = subprocess.run(['nordvpn', 'disconnect'], 
                                                 capture_output=True, text=True, timeout=10)
                self.log_message(f"Disconnect result: {disconnect_result.stdout.strip()}")
                time.sleep(3)
                
                # Connect to new country (allow more time)
                self.log_message(f"Connecting to {country}")
                result = subprocess.run(['nordvpn', 'connect', country],
                                      capture_output=True, text=True, timeout=90)
                
                if result.returncode == 0:
                    self.log_message(f"VPN switched successfully to {country}")

                    # POST_CONNECT hook (mirror nord_connect behavior)
                    post = os.environ.get('POST_CONNECT', '').strip()
                    if post:
                        self.log_message(f"Executing POST_CONNECT: {post}")
                        post_res = run_shell(post, timeout=60)
                        if post_res.returncode != 0:
                            self.log_message(f"POST_CONNECT failed: {post_res.stderr}")

                    # Optionally brief stabilization delay
                    time.sleep(2)

                    response = {"success": True, "country": country, "message": result.stdout.strip()}
                    self.send_response(200)
                else:
                    self.log_message(f"VPN switch failed for {country}: {result.stderr}")
                    response = {"success": False, "error": result.stderr.strip()}
                    self.send_response(500)
                
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                try:
                    self.wfile.write(json.dumps(response).encode())
                except BrokenPipeError:
                    self.log_message("Client disconnected during response write")
                
            except Exception as e:
                self.log_message(f"VPN switch error: {str(e)}")
                self.send_response(500)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps({"success": False, "error": str(e)}).encode())
        else:
            self.send_response(404)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(b'{"error":"Not found"}')

PORT = int(sys.argv[1]) if len(sys.argv) > 1 else 8080

with open('/tmp/vpn_api.log', 'a') as f:
    f.write(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] Starting Python VPN API server on port {PORT}\n")

with socketserver.TCPServer(("", PORT), VPNAPIHandler) as httpd:
    httpd.serve_forever()