#!/usr/bin/env python3

import http.server
import socketserver
import json
import subprocess
import time
import sys
from urllib.parse import urlparse, parse_qs

class VPNAPIHandler(http.server.BaseHTTPRequestHandler):
    def log_message(self, format, *args):
        with open('/tmp/vpn_api.log', 'a') as f:
            f.write(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] {format % args}\n")
    
    def do_GET(self):
        path = urlparse(self.path).path
        
        if path == '/health':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(b'{"status":"healthy"}')
            
        elif path == '/status':
            try:
                result = subprocess.run(['nordvpn', 'status'], capture_output=True, text=True, timeout=10)
                status = result.stdout.strip() if result.returncode == 0 else "Disconnected"
                
                try:
                    ip_result = subprocess.run(['curl', '-s', '--max-time', '5', 'ifconfig.me'], 
                                             capture_output=True, text=True, timeout=10)
                    ip = ip_result.stdout.strip() if ip_result.returncode == 0 else "unknown"
                except:
                    ip = "unknown"
                
                response = {"status": status, "ip": ip}
                
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps(response).encode())
                
            except Exception as e:
                self.send_response(500)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps({"error": str(e)}).encode())
        else:
            self.send_response(404)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(b'{"error":"Not found"}')
    
    def do_POST(self):
        path = urlparse(self.path).path
        
        if path == '/switch':
            try:
                # Read request body
                content_length = int(self.headers.get('Content-Length', 0))
                body = self.rfile.read(content_length).decode('utf-8') if content_length > 0 else '{}'
                data = json.loads(body) if body else {}
                
                # Determine country to switch to
                country = data.get('country', 'uk')  # Default to UK
                if country not in ['uk', 'nl', 'de']:
                    # Rotate through countries
                    countries = ['uk', 'nl', 'de']
                    country = countries[int(time.time()) % 3]
                
                self.log_message(f"VPN switch requested to: {country}")
                
                # Disconnect first
                subprocess.run(['nordvpn', 'disconnect'], capture_output=True, timeout=10)
                time.sleep(2)
                
                # Connect to new country
                result = subprocess.run(['nordvpn', 'connect', country], 
                                      capture_output=True, text=True, timeout=30)
                
                if result.returncode == 0:
                    self.log_message(f"VPN switched successfully to {country}")
                    response = {"success": True, "country": country, "message": result.stdout.strip()}
                    self.send_response(200)
                else:
                    self.log_message(f"VPN switch failed for {country}: {result.stderr}")
                    response = {"success": False, "error": result.stderr.strip()}
                    self.send_response(500)
                
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps(response).encode())
                
            except Exception as e:
                self.log_message(f"VPN switch error: {str(e)}")
                self.send_response(500)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps({"success": False, "error": str(e)}).encode())
        else:
            self.send_response(404)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(b'{"error":"Not found"}')

PORT = int(sys.argv[1]) if len(sys.argv) > 1 else 8080

with open('/tmp/vpn_api.log', 'a') as f:
    f.write(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] Starting Python VPN API server on port {PORT}\n")

with socketserver.TCPServer(("", PORT), VPNAPIHandler) as httpd:
    httpd.serve_forever()